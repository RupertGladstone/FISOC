


*** Obselete: superceded by the manual.  To be removed after checking for useful content ***


The FISOC hierarchy is caller -> parent -> everything else.

FISOC_caller.f90       The calling program, registers routines with ESMF
FISOC_parent.f90       ESMF gridded component, parent to ice and ocean components

Note: OM is for Ocean Model, and ISM is for Ice Sheet Model.

FISOC_coupler.f90    ESMF coupler component, handles regridding
FISOC_ISM.f90        ESMF gridded component, top level control for ice sheet model
FISOC_OM.f90         ESMF gridded component, top level control for ocean model

The FISOC_ISM and FISOC_OM modules provide top level control and processing for your main ISM or 
OM code.  These are not model-specific.  The model specific code, which exchanges fields between 
ESMF structures and structures used by the component, is in the FISOC_(name)Wrapper modules.
The main ISM or OM call structure must be made to be compatible with ESMF, which essentially means 
having seperate initialise, run and finalise calls.  See the ESMF documentation.

FISOC_config.rc is a Configuration file for FISOC.  Each component (ISM and OM) may also use its own 
configuration file(s).  More discussion/detail about the use of the config file below.

Summary of phases (these sequences are all hard coded in FISOC_parent.f90):

Initialisation sequence: OM_init_phase1 > ISM_init_phase1 > coupler_init_phase1 > OM_init_phase2 > coupler_init_phase2 > ISM_init_phase2

Run sequence: ISM_run > coupler_run_phase1 > OM_run > coupler_run_phase2

Finalise sequence: ISM_finalise > OM_finalise > coupler_finalise

Rationale behind the above sequences: the init_phase1 routines are for independent initialisation. 
The init_phase2 routines make the initialised OM state available to the ISM and vice versa.  This is 
to allow for any aspects of hte inialisation that are dependent on other components, and to allow 
double checking in the case that properties are defined independently by both OM and ISM initialisation.

The coupler phase1 routines regrid the ISM export state to the OM grid, and the phase 2 routines regrid 
the OM export state to the ISM mesh.


FISOC config file
=================

This seciton describes all the valid entries in a FISOC config file as follows:
 label:             [TYPE]   [Required?] Description


 ISM_meshFile:      [STRING] [optional]  The name of a netcdf file containing the ISM mesh in ESMF format.
 ISM_configFile:    [STRING] [optional]  The name of the ISM-specific config file.

 FISOC_ISM_ReqVars: [STRING] [required]  List of variable names required to be provided by the ISM.
 ISM_ReqVars:       [STRING] [optional]  Corresponding exactly to the above, but model-specific in case of 
                                          different naming conventions.
 FISOC_ISM_DerVars: [STRING] [required]  List of variables derived by FISOC from the ISM vars.  To be calculated 
                                          from ISM vars by hard coded routines in FISOC_ISM.

 OM_configFile:     [STRING] [optional]
 FISOC_OM_ReqVars:  [STRING] [required]  List of variable names required to be provided by the OM.
 OM_ReqVars:        [STRING] [optional]  Corresponding exactly to the above, but model-specific in case of 
                                         different naming conventions.
 FISOC_OM_DerVars:  [STRING] [required]  List of variables derived by FISOC from the OM vars.  To be calculated 
                                         from ISM vars by hard coded routines in FISOC_OM.

 OM_outputInterval: [INTEGER][optional]  FISOC collects OM output once every OM_outputInterval OM timesteps.
                                          Defaults to 1.  dt_ratio/OM_outputInterval must be integer.  
 OM_dt_sec:         [INTEGER][required]  OM timestep length in seconds.
 dt_ratio:          [INTEGER][required]  ISM/OM timestep ratio.
 start_year:        [INTEGER][required]  Start year and month define the start time of the coupled simulation.
 start_month:       [INTEGER][required]  
 end_year:          [INTEGER][required]  End year and month define the finish time of the coupled simulation.
 end_month:         [INTEGER][required]  

 verbose_coupling:  [LOGICAL][required]  Print FISOC comments to screen (a log will be written independently 
                                          of the settings of this value).


FISOC required fields
=====================

Abbreviations for levels:
l0                 level 0 is the base of the ice (i.e. the height of the ice-ocean interface)
l1                 level 1 is the first ISM model level above the base of the ice

Variable naming convention: always start with component abbreviation (OM or ISM). 
Follow by meaningful name, followed by level indicator.

ISM fields:
ISM_temperature_l0 Ice temperature at level 0
ISM_temperature_l1 Ice temperature at level 1
ISM_z_l0           Height above sea level at level 0
ISM_z_l1           Height above sea level at level 1
ISM_dTdz_l0        Rate of change of temperature with height above sea level at level 0
ISM_z_l0_previous  Height above sea level at level 0, previous timestep

OM fields:
OM_dBdt_l0         Rate of change of height (above sea level) of ice base at level 0 (note: B = z_l0)

FISOC doesn't care about units.  The user must ensure consistency.  These should work ok with Elmer/Ice 
standard set up:
Centigrade (C), metres (m), C/m, m/year.  Timesteps typically in years in Elmer/Ice.  Typically seconds 
in FISOC.  Care required.


Using different component models
================================

To adapt FISOC to use a new ISM called MyISM, assuming MyISM is already ESMF compliant, write a new 
wrapper with the same public subroutines as FISOC_ISM_Wrapper_Elmer.f90 and call it 
FISOC_ISM_Wrapper_MyISM.f90.  Set the environment variable $FISOC_ISM to "MyISM".  There are currently 
the following (list can easily be extended) environment variables used in the FISOC build process:

FISOC_ISM_SO      location of shared object file for linking
FISOC_ISM_INC     for includes, will be added to compile flags
***
 (e.g. Elmer needs to link to 
ElmerSolver.so shared object file, and this is set through the FISOC_ISM_SO environment variable).

Perhaps this should be modified so that the Makefile directly uses a set of compilation and linking 
flags set directly through environment variables rather than including this logic in a model-specific
way in the Makefile.


Required developments
=====================

The actual OM grid will be 3D.  Can we extract just the top level for regridding to the ISM mesh?
Or should we create a separate 2D grid just for the top level and use this for data exchange? 
Certainly the ISM will hold a separate 2D mesh in ESMF format independently from the main 3D mesh 
held internally (at least we will do it this way for Elmer/Ice).

Is it ok to do the regridding on a 2D grid/mesh, or do we need a 2D surface in 3D space?

The build order is clunky, especially having the ISM and OM names as env vars and simply copying code 
from a makefile rule.  Implement a better way of choosing which components to use.

How do we want to do the time processing for asynchronous coupling?  Should the OM make a time mean 
of its output state?  Or should there be an ISM run phase each time step that simply does some time 
processing but doesn't actually call the ISM itself?


Improvements for the dummy/template coupling:

The regridding from OM grid to ISM mesh needs checking.  Numbers look a little odd (currently printed to 
screen in verbose mode from ISM run phase).

There is code duplication in the coupler: cpl run phases 1 and 2 could be made identical with some 
renaming (specifically remove OM and ISM from all variable names).  This may also be true for 
the init phases.  And there is considerable overlap between init and run phases, some of which 
could be moved to a shared subroutine.

Move grid/mesh creation to separate subroutines.

Use ESMF attributes on the child gridded components to store info specific to the model used, and 
parameters related to asynchronous time stepping (this would be neater than passing the config object 
around all the time).

Add the option for more sophisticated calculation of temperature gradient at the ice base.  Currently 
it is linear between the lowest two levels, but other options based on certain theoretical 
assumptions may be better... (e.g. analytic steady solution for an interface moving at constant velocity)

***add required var lists to the config file, use these in components so that var lists are not hard coded 
in components.




Elmer: note LD_LIBRARY_PATH must contain the ElmerSolver.so shared object file at run time.