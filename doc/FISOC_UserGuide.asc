
FISOC User Guide
================

Framework for Ice Sheet - Ocean Coupling.  FISOC comprises a Fortran90 (f90) program and f90 
modules to couple an Ice Sheet Model (ISM) to an Ocean Model (OM) for the purpose of simulating 
marine ice sheets where ice-ocean interactions are thought to be important.

Note: this will eventually turn in to a user guide but is currently also a place to record 
development notes.



Building and running FISOC
==============

Pre-requisites:
ESMF must be installed with netcdf.  ***needs fortran and c libraries***Compiling netcdf to give the right libraries for ESMF can be 
fiddly.  As of early 2014 the notes in FISOC_ESMF_CompileNotes.asc were relevant.

An Ice Sheet Model (ISM) must be available.  Alternatively, the FISOC framework can be 
tested using the dummy ISM provided.

An Ocean Model (OM) must be available.  Alternatively, the FISOC framework can be 
tested using the dummy OM provided.

Note that the dummy models do not provide any physically meaningful outputs.

In order to use an ISM called ISM_name, you need to set the environment variable FISOC_ISM.  
If you use bash you can do this by adding the following line to your ~/.bashrc file:
export FISOC_ISM="dummy"

In order to use an OM called OM_name, you need to set the environment variable FISOC_OM.
If you use bash you can do this by adding the following line to your ~/.bashrc file:
export FISOC_OM="dummy"

To compile FISOC, simply run make in the top level FISOC directory.

Do not directly modify the files FISOC_ISM.f90 and FISOC_OM.f90.  These are copies made 
during the build.




FISOC code structures
=====================
You need basic familiarity with the ESMF coding structures in order to understand the FISOC design.
A goood place to get started is the "getting started" document.  At time of writing (Jan 2015) this 
can be found at:
http://www.earthsystemmodeling.org/users/getting_started.shtml

The FISOC hierarchy is caller -> parent -> everything else.

FISOC_caller.f90       The calling program, registers routines with ESMF
FISOC_parent.f90       ESMF gridded component, parent to ice and ocean components

Note: OM is for Ocean Model, and ISM is for Ice Sheet Model.

FISOC_coupler.f90    ESMF coupler component, handles regridding
FISOC_ISM.f90        ESMF gridded component, ice sheet model
FISOC_OM.f90         ESMF gridded component, ocean model

The FISOC_ISM and FISOC_OM  modules serve as wrappers for your main ISM or OM code.  The main ISM 
or OM call structure must be made to be compatible with ESMF, which essentially means having 
seperate initialise, run and finalise calls.  See the ESMF documentation.

FISOC_config.rc is a Configuration file for FISOC.  Each component (ISM and OM) may also use its own 
configuration file(s).  More discussion/detail about the use of the config file to follow...

Summary of phases (these sequences are all hard coded in FISOC_parent.f90):

Initialisation sequence: OM_init_phase1 > ISM_init_phase1 > coupler_init_phase1 > OM_init_phase2 > coupler_init_phase2 > ISM_init_phase2

Run sequence: ISM_run > coupler_run_phase1 > OM_run > coupler_run_phase2

Finalise sequence: ISM_finalise > OM_finalise > coupler_finalise

Rationale behind the above sequences: the init_phase1 routines are for independent initialisation. 
The init_phase2 routines make the initialised OM state available to the ISM and vice versa.  This is 
to allow for any aspects of hte inialisation that are dependent on other components, and to allow 
double checking in the case that properties are defined independently by both OM and ISM initialisation.

The coupler phase1 routines regrid the ISM export state to the OM grid, and the phase 2 routines regrid 
the OM export state to the ISM mesh.


FISOC required fields
=====================

Abbreviations for levels:
l0                 level 0 is the base of the ice (i.e. the height of the ice-ocean interface)
l1                 level 1 is the first ISM model level above the base of the ice

Variable naming convention: always start with component abbreviation (OM or ISM). 
Follow by meaningful name, followed by level indicator.

ISM fields:
ISM_temperature_l0 Ice temperature at level 0
ISM_temperature_l1 Ice temperature at level 1
ISM_z_l0           Height above sea level at level 0
ISM_z_l1           Height above sea level at level 1
ISM_dTdz_l0        Rate of change of temperature with height above sea level at level 0
ISM_z_l0_previous  Height above sea level at level 0, previous timestep

OM fields:
OM_dBdt_l0         Rate of change of height (above sea level) of ice base at level 0 (note: B = z_l0)

FISOC doesn't care about units.  The user must ensure consistency.  These should work ok with Elmer/Ice 
standard set up:
Centigrade (C), metres (m), C/m, m/year.  Timesteps typically in years in Elmer/Ice.  Typically seconds 
in FISOC.  Care required.


Required developments
=====================

The actual OM grid will be 3D.  Can we extract just the top level for regridding to the ISM mesh?
Or should we create a separate 2D grid just for the top level and use this for data exchange? 
Certainly the ISM will hold a separate 2D mesh in ESMF format independently from the main 3D mesh 
held internally (at least we will do it this way for Elmer/Ice).

Is it ok to do the regridding on a 2D grid/mesh, or do we need a 2D surface in 3D space?

The build order is clunky, especially having the ISM and OM names as env vars and simply copying code 
from a makefile rule.  Implement a better way of choosing which components to use.

How do we want to do the time processing for asynchronous coupling?  Should the OM make a time mean 
of its output state?  Or should there be an ISM run phase each time step that simply does some time 
processing but doesn't actually call the ISM itself?


Improvements for the dummy/template coupling:

The regridding from OM grid to ISM mesh needs checking.  Numbers look a little odd (currently printed to 
screen in verbose mode from ISM run phase).

There is code duplication in the coupler: cpl run phases 1 and 2 could be made identical with some 
renaming (specifically remove OM and ISM from all variable names).  This may also be true for 
the init phases.  And there is considerable overlap between init and run phases, some of which 
could be moved to a shared subroutine.

Move grid/mesh creation to separate subroutines.

Use ESMF attributes on the child gridded components to store info specific to the model used, and 
parameters related to asynchronous time stepping (this would be neater than passing the config object 
around all the time).

Add the option for more sophisticated calculation of temperature gradient at the ice base.  Currently 
it is linear between the lowest two levels, but other options based on certain theoretical 
assumptions may be better... (e.g. analytic steady solution for an interface moving at constant velocity)


Bugs
====

