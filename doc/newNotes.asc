
GMD paper sections:

intro
software design
user guide (2 sections: using Elmer/ROMS, and modifying to incorporate your own component)

requirements in terms of config info.  special rules, e.g. ts_ratio divisible by OM_output etc

software design sections include:

overall structure
relationship between FISOC code structure and ESMF objects:
state objects used doen to FISOC OM/ISM level, but not in model specific wrappers.  model specific wrappers use fieldbundles as highest level objects.

something on use of alarms.


error handling:
uses ESMF methods for error handlling, but currently all errors within the FISOC code cause the error to be logged and the program to terminate via ESMF_finalize.
If the FISOC code structures become more complex this could easily be extended to intead return the error up through the FISOC part of the call stack, for more complete 
traceability.
In either case, errors are generally considered fatal.

configuration:
The configuration file is compatible with ESMF config methods.  An ESMF_config object is created and ESMF methods can be used to access config info.
There are some parameters that are derived from config parameters.  The FISOC_utils module provides subroutines (***names of these subroutines in table?) for obtaining derived config parameters.
These subroutines can be viewed informally as additional methods to complement the ESMF config access methods. 
Note that the hard-coded calculations to provide derived config parameters cause a loss of efficiency (except possibly in the case of intelligent optimisation from compilers) but these 
are very cheap operations and this does not have a measurable impact on the overall computational cost of the FISOC code.


parallelisation and domain decomposition:
VM, VAS, DE, PET, MPI
sequential, shared context, components get parent context, duplicate mpi comm for components that need it.
